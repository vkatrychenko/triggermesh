/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MongoDBSourceLister helps list MongoDBSources.
// All objects returned here must be treated as read-only.
type MongoDBSourceLister interface {
	// List lists all MongoDBSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MongoDBSource, err error)
	// MongoDBSources returns an object that can list and get MongoDBSources.
	MongoDBSources(namespace string) MongoDBSourceNamespaceLister
	MongoDBSourceListerExpansion
}

// mongoDBSourceLister implements the MongoDBSourceLister interface.
type mongoDBSourceLister struct {
	indexer cache.Indexer
}

// NewMongoDBSourceLister returns a new MongoDBSourceLister.
func NewMongoDBSourceLister(indexer cache.Indexer) MongoDBSourceLister {
	return &mongoDBSourceLister{indexer: indexer}
}

// List lists all MongoDBSources in the indexer.
func (s *mongoDBSourceLister) List(selector labels.Selector) (ret []*v1alpha1.MongoDBSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MongoDBSource))
	})
	return ret, err
}

// MongoDBSources returns an object that can list and get MongoDBSources.
func (s *mongoDBSourceLister) MongoDBSources(namespace string) MongoDBSourceNamespaceLister {
	return mongoDBSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MongoDBSourceNamespaceLister helps list and get MongoDBSources.
// All objects returned here must be treated as read-only.
type MongoDBSourceNamespaceLister interface {
	// List lists all MongoDBSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MongoDBSource, err error)
	// Get retrieves the MongoDBSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MongoDBSource, error)
	MongoDBSourceNamespaceListerExpansion
}

// mongoDBSourceNamespaceLister implements the MongoDBSourceNamespaceLister
// interface.
type mongoDBSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MongoDBSources in the indexer for a given namespace.
func (s mongoDBSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MongoDBSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MongoDBSource))
	})
	return ret, err
}

// Get retrieves the MongoDBSource from the indexer for a given namespace and name.
func (s mongoDBSourceNamespaceLister) Get(name string) (*v1alpha1.MongoDBSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mongodbsource"), name)
	}
	return obj.(*v1alpha1.MongoDBSource), nil
}
